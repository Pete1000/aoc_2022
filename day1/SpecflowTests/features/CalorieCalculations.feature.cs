// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CalorieCalculationsFeature : object, Xunit.IClassFixture<CalorieCalculationsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CalorieCalculations.feature"
#line hidden
        
        public CalorieCalculationsFeature(CalorieCalculationsFeature.FixtureData fixtureData, SpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "features", "CalorieCalculations", "As a person interested in the calorific content of food items carried by Elves\r\nI" +
                    " would like to ensure that the totals are calculated correctly\r\nSo that I know w" +
                    "hich Elves are carrying food items with the highest calorific content", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Elf with highest calorie total is correctly calculated")]
        [Xunit.TraitAttribute("FeatureTitle", "CalorieCalculations")]
        [Xunit.TraitAttribute("Description", "Elf with highest calorie total is correctly calculated")]
        public void ElfWithHighestCalorieTotalIsCorrectlyCalculated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Elf with highest calorie total is correctly calculated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Elf",
                            "ItemCalories"});
                table1.AddRow(new string[] {
                            "1",
                            "10,10,10"});
                table1.AddRow(new string[] {
                            "2",
                            "50"});
                table1.AddRow(new string[] {
                            "3",
                            "20,20,20"});
                table1.AddRow(new string[] {
                            "4",
                            "40,60"});
                table1.AddRow(new string[] {
                            "5",
                            "30,30"});
#line 8
 testRunner.Given("a set of Elves with the following food items", ((string)(null)), table1, "Given ");
#line hidden
#line 15
 testRunner.When("I look for the 1 Elves with the highest total number of calories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "4"});
#line 16
 testRunner.Then("The Elves with the highest total number of calories will be", ((string)(null)), table2, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "100"});
#line 18
 testRunner.And("The total number of calories will be", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Top 3 Elves with highest calorie totals are correctly calculated")]
        [Xunit.TraitAttribute("FeatureTitle", "CalorieCalculations")]
        [Xunit.TraitAttribute("Description", "Top 3 Elves with highest calorie totals are correctly calculated")]
        public void Top3ElvesWithHighestCalorieTotalsAreCorrectlyCalculated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Top 3 Elves with highest calorie totals are correctly calculated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Elf",
                            "ItemCalories"});
                table4.AddRow(new string[] {
                            "1",
                            "10,10,10"});
                table4.AddRow(new string[] {
                            "2",
                            "50"});
                table4.AddRow(new string[] {
                            "3",
                            "20,20,20"});
                table4.AddRow(new string[] {
                            "4",
                            "40,60"});
                table4.AddRow(new string[] {
                            "5",
                            "30,40"});
#line 22
 testRunner.Given("a set of Elves with the following food items", ((string)(null)), table4, "Given ");
#line hidden
#line 29
 testRunner.When("I look for the 3 Elves with the highest total number of calories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index"});
                table5.AddRow(new string[] {
                            "4"});
                table5.AddRow(new string[] {
                            "5"});
                table5.AddRow(new string[] {
                            "3"});
#line 30
 testRunner.Then("The Elves with the highest total number of calories will be", ((string)(null)), table5, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "TotalCalories"});
                table6.AddRow(new string[] {
                            "100"});
                table6.AddRow(new string[] {
                            "70"});
                table6.AddRow(new string[] {
                            "60"});
#line 35
 testRunner.And("The total number of calories will be", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Exception is thrown if I try to run calculations when there are no Elves")]
        [Xunit.TraitAttribute("FeatureTitle", "CalorieCalculations")]
        [Xunit.TraitAttribute("Description", "Exception is thrown if I try to run calculations when there are no Elves")]
        public void ExceptionIsThrownIfITryToRunCalculationsWhenThereAreNoElves()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exception is thrown if I try to run calculations when there are no Elves", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Elf",
                            "ItemCalories"});
#line 42
 testRunner.Given("a set of Elves with the following food items", ((string)(null)), table7, "Given ");
#line hidden
#line 44
 testRunner.Then("an exception is thrown with message \'No Elves!!!\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalorieCalculationsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalorieCalculationsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
